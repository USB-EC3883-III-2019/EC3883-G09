=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "MBit1"     (component MultiBitIO)
   - MBit1_GetDir -Returns selected direction.
   - MBit1_GetVal -Returns the value of the Input/Output component. Component calls ancestor's [GetVal] for each bit and 
                composes value according its order. That is [direction] independent, for details look into ancestor 
                documentation.
   - MBit1_PutVal -Specified value is passed to the Input/Output component. Component calls ancestor's [PutVal] for each bit 
                with corresponded value. That is [direction] independent, for details look into ancestor documentation.  This 
                method is enabled only if the Direction = _[output]_ or _[input/output]_.
   - MBit1_GetBit -Returns the value of the specified bit/pin of the Input/Output component. For specified bit is called 
                ancestor's [GetVal] method. That is [direction] independent, for details look into ancestor documentation. Pins 
                are addressed form zero, where 0 is equaled to LSB. In case incorrept pin number value is used method returns 0.
   - MBit1_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. For specified bit is 
                called ancestor's [PutVal] method. That is [direction] independent, for details look into ancestor 
                documentation..  This method is enabled only if the Direction = _[output]_ or _[input/output]_. Pins are 
                addressed form zero, where 0 is equaled to LSB.
   - MBit1_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)].  This 
                method is enabled only if the Direction = _[output]_ or _[input/output]_). Pins are addressed form zero, where 
                0 is equaled to LSB.
   - MBit1_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, FALSE)
                ].  This method is enabled only if the Direction = _[output]_ or _[input/output]_). Pins are addressed form 
                zero, where 0 is equaled to LSB.
   - MBit1_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!GetBit(Bit)
                )].  This method is enabled only if the Direction = _[output]_ or _[input/output]_). Pins are addressed form 
                zero, where 0 is equaled to LSB.

Module "Trigger"   (component BitIO)
   - Trigger_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - Trigger_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Trigger_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Trigger_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - Trigger_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "TI1"       (component TimerInt)
   - TI1_Enable -This method enables the component - it starts the timer. Events may be generated (<DisableEvent>/<EnableEvent>)
                .
   - TI1_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "TI2"       (component TimerInt)

Module "Echo"      (component Capture)
   - Echo_Enable -This method enables the component - it starts the capture. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - Echo_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Echo_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in <General Info>)
                . The method does not return valid value after initialization or after <Reset> until new capture event (even if 
                the returned Error code is ERR_OK).

Module "Lidar"     (component ADC)
   - Lidar_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - Lidar_GetValue -Returns the last measured values for all channels. Format and width of the value is a native format of the 
                A/D converter.
   - Lidar_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this 
                method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is 
                less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "AS1"       (component AsynchroSerial)
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "Cpu"       (component MC9S08QE128_80)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts

===================================================================================
